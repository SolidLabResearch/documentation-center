{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"SolidLab Documentation Center","text":"<ul> <li>Getting started: get started with the Solid ecosystem with curated instructions for popular use cases.</li> <li>Tutorials: step-by-step instructions for common use cases.</li> <li>Tools and libraries: learn more about developers tools and libraries.</li> <li>Challenge reports: read the reports of our SolidLab challenges.</li> <li>FAQ: get answers to the most frequently asked questions.</li> </ul> <p>If you have any feedback,  please create a GitHub issue in this repository.</p> <p>Find the latest updates of this website here.</p>"},{"location":"faq/","title":"FAQ","text":""},{"location":"faq/#do-a-webid-and-an-idp-need-to-have-the-same-domain","title":"Do a WebID and an IDP need to have the same domain?","text":"<p>No. They can have different domains. They can be hosted on different servers as well.</p>"},{"location":"faq/#do-a-webid-and-a-pod-need-to-have-the-same-domain","title":"Do a WebID and a pod need to have the same domain?","text":"<p>No. They can have different domains. They can be hosted on different servers as well.</p> <p>You cannot determine the root container/url of a pod via the url of the WebID. For example, if the WebID is <code>http://example.com/profile/card#me</code> then you can't conclude that the pod is at <code>http://example.com/</code> or <code>http://example.com/profile/</code>.</p> <p>You cannot determine what type of access someone has based on the similarity between the url of a resource (on a pod) and the url of their WebID. For example, if the WebID is <code>http://example.com/profile/card#me</code> then you can't conclude that the user has access to the resources <code>http://example.com/</code> or <code>http://example.com/private/</code>.</p>"},{"location":"faq/#do-an-idp-and-a-pod-need-to-have-the-same-domain","title":"Do an IDP and a pod need to have the same domain?","text":"<p>No. They can have different domains. They can be hosted on different servers as well.</p> <p>You cannot determine the pod of user based on their IDP. For example, if the IDP is <code>http://example.com/idp</code> then you can't conclude that the pod is at <code>http://example.com/</code> or <code>http://example.com/pod/</code>.</p> <p>The Community Solid Server (CSS) can be used as both an IDP and pod, but this is not required. Users can use CSS for only the IDP functionality or only the pod functionality.</p>"},{"location":"faq/#how-to-get-an-idp-via-a-webid","title":"How to get an IDP via a WebID?","text":"<p>Dereference the url of the WebID and  look for the predicate <code>solid:iodcIssuer</code>. This predicate is required for the OIDC flow, but a WebID is still valid without it.</p>"},{"location":"faq/#how-to-get-a-pod-via-a-webid","title":"How to get a pod via a WebID?","text":"<p>Dereference the url of the WebID and look for the predicate <code>pim:storage</code>. This predicate is not a requirement for a WebID.</p>"},{"location":"faq/#how-to-get-a-webid-via-an-idp","title":"How to get a WebID via an IDP?","text":"<p>After logging in some libraries, such as the Inrupt authentication library, provide the WebID of the logged-in user.</p>"},{"location":"faq/#how-to-get-a-webid-via-a-pod","title":"How to get a WebID via a pod?","text":"<p>If the pod wants to advertise the owner, then  the owner's WebID is included in the Link header with <code>rel=\"http://www.w3.org/ns/solid/terms#owner\"</code> in the response to  HTTP HEAD and GET requests.  See the Solid Protocol for more details. This means that the pod can share this information, but it is not required. This also means that information about WebIDs that are not owners is not available. These non-owners might still have access to specific resources on the pod.</p>"},{"location":"faq/#how-to-get-an-idp-via-a-pod","title":"How to get an IDP via a pod?","text":"<p>You can't do that directly via the pod.  But using the answer to the question \"How to get a WebID via a pod?\" you might be able to determine the WebID of the owner. Next you dereference the url of the WebID and  look for the predicate <code>solid:iodcIssuer</code>.</p>"},{"location":"faq/#how-to-get-a-pod-via-an-idp","title":"How to get a pod via an IDP?","text":"<p>You can't do that directly via the IDP. But using the answer to the question \"How to get a WebID via an IDP?\" you might be able to determine the WebID after logging in. Next you dereference the url of the WebID and look for the predicate <code>pim:storage</code>.</p>"},{"location":"faq/#how-to-get-all-webids-that-are-registered-with-an-idp","title":"How to get all WebIDs that are registered with an IDP?","text":"<p>You can't do that.</p>"},{"location":"faq/#references","title":"References","text":"<p>https://solidlab.be/wp-content/uploads/2023/01/End-user-identity-in-Solid.pdf</p>"},{"location":"faq/#query-faq-yourself","title":"Query FAQ yourself","text":"<p>You can query the frequently asked questions and their answers yourself via the data at https://data.knows.idlab.ugent.be/person/office/solid-faq.</p>"},{"location":"getting-started/","title":"Getting started","text":""},{"location":"getting-started/#create-solid-web-app-via-template","title":"Create Solid Web app via template","text":"<p>We created a template that  helps you to get started with a Solid Web app. It has the following features:</p> <ul> <li>Community Solid Server to test with pods locally.</li> <li>Comunica for querying pods and other data sources.</li> <li>Solid Authentication library   for authenticating with an identity provider.</li> <li>webpack to bundle the JavaScript.</li> <li>Cypress to test our app.</li> </ul>"},{"location":"getting-started/#create-solid-service-via-template","title":"Create Solid service via template","text":"<p>We created a template that helps you to get started with a Solid service. It has the following features:</p> <ul> <li>Community Solid Server (CSS) to test with pods locally.</li> <li>Comunica for querying pods and other data sources.</li> </ul> <p>We rely on the Client Credentials offered by the CSS. The advantage is that it allows the service to work without user interaction for authentication. The disadvantage is that it doesn't work with other Solid servers. This only applies to authentication. Once authentication is done, everything else works as expected when you follow the Solid protocol. When there is a specification on how to do this type of authentication with every Solid server, we will update this template.</p>"},{"location":"latest-updates/","title":"Latest updates","text":""},{"location":"latest-updates/#2023-07-19","title":"2023-07-19","text":"<ul> <li>Added Solid service template to Getting started page</li> </ul>"},{"location":"latest-updates/#2023-07-14","title":"2023-07-14","text":"<ul> <li>Added Solid Web app template to Getting started page</li> </ul>"},{"location":"latest-updates/#2023-07-04","title":"2023-07-04","text":"<ul> <li>Initial release of this website.</li> </ul>"},{"location":"terminology/","title":"Terminology","text":"<p>We don't have a list of terms yet, but in the meantime you can have a look at  this list.</p>"},{"location":"tools-libraries/","title":"Tools and libraries","text":"<ul> <li>Bashlib: A Node.JS and CLI interface for Solid.</li> <li>Community Solid Server: An open and modular implementation of the Solid specifications. You find the documentation here.</li> <li>Comunica: A modular framework for querying Linked Data on the Web. You find the documentation here.</li> <li>koreografeye: A web choreography service using eye.</li> <li>Solid JavaScript Authentication: A client library for authenticating with Solid written by inrupt.</li> <li>Solid service template: A template for a Solid service.</li> <li>Solid Web app template: A template for a Solid Web app.</li> <li>solideditor: A VSCode clone for editing plain text files on Solid pods.</li> <li>SolidLabLib.js: A library of helper functions for developing Solid apps in TypeScript/JavaScript.</li> <li>waceditor: A Solid App to manage access rights for your pod resources.</li> </ul>"},{"location":"tools-libraries/#query-tools-and-libraries-yourself","title":"Query tools and libraries yourself","text":"<p>You can query the tools and libraries yourself via the data at https://data.knows.idlab.ugent.be/person/office/software and https://data.knows.idlab.ugent.be/person/office/external-software .</p>"},{"location":"tutorials/","title":"Tutorials","text":"<ul> <li>Getting started with the Community Solid Server: This tutorial uses the Community Solid Server (CSS) to both provide an introduction to Solid server behaviour, and an introduction to the CSS itself.</li> <li>Querying Solid pods with Comunica: This tutorial explains how you can query Solid pods with Comunica.</li> </ul>"},{"location":"tutorials/#query-tutorials-yourself","title":"Query tutorials yourself","text":"<p>You can query the tutorials yourself via the data at https://data.knows.idlab.ugent.be/person/office/tutorials.</p>"},{"location":"challenge-reports/","title":"Challenge reports","text":"<p>SolidLab Challenges are technological challenges with  a clear scope and expected outcome  that someone should be able to resolve in maximum 3 months. Once a challenge is completed, we write a report about it that includes the solution, important technological decisions and assumptions, follow-up actions and future work.</p>"},{"location":"challenge-reports/#all-reports","title":"All reports","text":"<ul> <li>Aggregators to improve social media data access across many pods (2023-02-23, permalink)</li> <li>App that lists apps and tooling (2023-01-27, permalink)</li> <li>Automatically test performance of each Community Solid Server commit (2023-01-27, permalink)</li> <li>Browser extension intercepting urls to open resources with user-defined app (2023-01-27, permalink)</li> <li>Determining query equivalence between newly registered query and already executing query (2023-07-05, permalink)</li> <li>Drag &amp; drop form builder to build basic RDF form definition (2023-02-10, permalink)</li> <li>Edit pod files in Visual Studio Code (2023-02-06, permalink)</li> <li>External service stores calendar in pod (2023-03-13, permalink)</li> <li>Form renderer that to view RDF form and store filled-in data in pod (2023-02-10, permalink)</li> <li>Greet user with preferred name (2023-01-27, permalink)</li> <li>Menubar app to check who is on vacation (2023-05-11, permalink)</li> <li>Public Community Solid Server instance for testing (2023-02-06, permalink)</li> <li>Read and write data in Web app relying on Solid authentication browser extension (2023-06-08, permalink)</li> <li>Store, manage, share and query location (history) data (2023-01-27, permalink)</li> <li>Storing large real-time data streams in pod using LDES (2023-06-28, permalink)</li> <li>Temporal Usage Control Policy execution for Solid Resources (2023-07-04, permalink)</li> </ul>"},{"location":"challenge-reports/#reports-with-follow-up-actions","title":"Reports with follow-up actions","text":"<p>Below you find the reports with follow-up actions for the Community Solid Server, Comunica, SolidLabLib.js, or other libraries/tools.</p>"},{"location":"challenge-reports/#community-solid-server","title":"Community Solid Server","text":"<p>None.</p>"},{"location":"challenge-reports/#comunica","title":"Comunica","text":"<p>None.</p>"},{"location":"challenge-reports/#solidlablibjs","title":"SolidLabLib.js","text":"<ul> <li>Greet user with preferred name</li> </ul>"},{"location":"challenge-reports/#other","title":"Other","text":"<ul> <li>Aggregators to improve social media data access across many pods</li> <li>Automatically test performance of each Community Solid Server commit</li> <li>External service stores calendar in pod</li> <li>Menubar app to check who is on vacation</li> <li>Temporal Usage Control Policy execution for Solid Resources</li> </ul>"},{"location":"challenge-reports/#query-challenges-and-reports-yourself","title":"Query challenges and reports yourself","text":"<p>You can query the completed challenges and their corresponding reports yourself via the data at https://data.knows.idlab.ugent.be/person/office/solidlab-challenges.</p>"},{"location":"challenge-reports/aggregators-to-improve-social-media-data-access-across-many-pods/","title":"Aggregators to improve social media data access across many pods","text":""},{"location":"challenge-reports/aggregators-to-improve-social-media-data-access-across-many-pods/#aggregators-to-improve-social-media-data-access-across-many-pods-permalink","title":"Aggregators to improve social media data access across many pods (permalink)","text":"<p>The corresponding challenge is #24.</p>"},{"location":"challenge-reports/aggregators-to-improve-social-media-data-access-across-many-pods/#problem","title":"Problem","text":"<p>Applications that require to aggregate data across many pods can be faced with slow response times due to  the latency of data retrieval and processing of the large number of pods.  This is typically the case in a social media scenario,  where the timelines of their users are curated based on the activities of their contacts.  Computing these timelines when the users access their social media applications is typically not feasible  due to latency constraints.  Therefore, the timelines should be precomputed as a form of aggregation.</p>"},{"location":"challenge-reports/aggregators-to-improve-social-media-data-access-across-many-pods/#approved-solution","title":"Approved solution","text":"<p>We developed a demo that  uses our Solid Aggregator Server and  Solid Aggregator Client to show the difference in execution time of a query between using the aggregator and not using the aggregator. We use the SolidBench.js benchmark to simulate data pods with social media data.</p> <p>The Solid Aggregator Server functions as an intermediate component in the Solid network.  The server accepts queries from client applications and  directly exposes the result of the queries, which are the computed bindings.  This allows client applications to retrieve the query results directly from the aggregator instead of  evaluating expensive queries themselves. The Solid Aggregator Client make it easier for developers to work with the aggregator.</p> <p>This server computes the bindings and  keeps them up to date when changes in the resources in the Solid network occur.  In other words, the server makes sure that changes in the resources are reflected in  the resulting bindings of a specific query.  We do this by re-evaluating the queries every time a resource has changed.</p>"},{"location":"challenge-reports/aggregators-to-improve-social-media-data-access-across-many-pods/#user-flow","title":"User flow","text":""},{"location":"challenge-reports/aggregators-to-improve-social-media-data-access-across-many-pods/#actorsactresses","title":"Actors/actresses","text":"<ul> <li>User of the demo</li> </ul>"},{"location":"challenge-reports/aggregators-to-improve-social-media-data-access-across-many-pods/#preconditions","title":"Preconditions","text":"<ul> <li>The user has Node.js installed.</li> </ul>"},{"location":"challenge-reports/aggregators-to-improve-social-media-data-access-across-many-pods/#steps","title":"Steps","text":"<ol> <li>Clone the demo repo via <code>git clone https://github.com/maartyman/solidBenchAggregatorDemo.git</code>.</li> <li>Install dependencies via <code>npm i</code>.</li> <li>Set up and start servers via <code>npm run setupAndStartServers</code>.</li> <li>Wait till the console says \"Everything is set up and ready for the demo!\".</li> <li>Execute one of the four demo queries in a new terminal:<ul> <li>Find all the WebIDs of the friends of pod <code>00000000000000000933</code> via <code>npm run simple-query</code>    (see details).</li> <li>Determine the distance between user <code>00000000000000000102</code> and some predetermined users via <code>npm run complex-query</code>    (see details).</li> <li>Find all the posts in a pod (including where they were posted and their contents) via <code>npm run link-traversal-query</code>    (see details).</li> <li>Find all the WebId's of the friends of pod <code>00000000000000000933</code> while adding and removing a friend every 2 second    via <code>npm run update-example</code> (see details).</li> </ul> </li> </ol>"},{"location":"challenge-reports/aggregators-to-improve-social-media-data-access-across-many-pods/#postconditions","title":"Postconditions","text":"<p>The user sees the results of the query in the terminal where the query was started. For <code>npm run complex-query</code> that is</p> <pre><code>Result aggregated (0.005 s): \n  bindings: \n    fr: http://localhost:3000/pods/00000000000000000296/profile/card#me\n    dist: 1\n  bindings: \n    fr: http://localhost:3000/pods/00000000000000000318/profile/card#me\n    dist: 1\n    ...\nResult client (46.363 s): \n  bindings: \n    fr: http://localhost:3000/pods/00000000000000000296/profile/card#me\n    dist: 1\n  bindings: \n    fr: http://localhost:3000/pods/00000000000000000318/profile/card#me\n    dist: 1\n    ...\n</code></pre> <p>Using the aggregator it takes only 0.005s to get the results, while when executing the query solely in a client application it takes 46.363s.</p>"},{"location":"challenge-reports/aggregators-to-improve-social-media-data-access-across-many-pods/#follow-up-actions","title":"Follow-up actions","text":"<ul> <li>Instead of re-executing the query, use incremental approaches.</li> <li>Use incremental link-traversal.</li> <li>Use incremental schema-alignment.</li> <li>Research discoverability of the aggregator and combining the result of multiple aggregators to get the results to a query.</li> <li>Expose a SPARQL endpoint so that any SPARQL client can use it. </li> </ul>"},{"location":"challenge-reports/aggregators-to-improve-social-media-data-access-across-many-pods/#future-work","title":"Future work","text":"<p>None.</p>"},{"location":"challenge-reports/aggregators-to-improve-social-media-data-access-across-many-pods/#contributors","title":"Contributors","text":"<ul> <li>Challenge: Pieter Bonte</li> <li>Solution: Maarten Vandenbrande</li> <li>Report: Pieter Heyvaert</li> </ul>"},{"location":"challenge-reports/app-that-lists-apps-and-tooling/","title":"App that lists apps and tooling","text":""},{"location":"challenge-reports/app-that-lists-apps-and-tooling/#app-that-lists-apps-and-tooling-permalink","title":"App that lists apps and tooling (permalink)","text":"<p>The corresponding challenge is #30.</p>"},{"location":"challenge-reports/app-that-lists-apps-and-tooling/#problem","title":"Problem","text":"<p>The goal is for the Solid project to \"eat its own dog food\" by having an app/interface in which users can see  which apps and developer tooling exist within the ecosystem.</p> <p>Concretely: - There exists an ontology with which apps and tooling are described. - The data is published and maintained in a sustainable way. - Developers are incentivied to keep an up-to-date record of their work  or this can be entirely automated for them by scraping data from wherever they are doing their work such as GitHub, Gitlab, and so on.</p> <p>In the long term, I would envision this to be an app store for Solid apps and a wiki for developer tooling/sdks.</p>"},{"location":"challenge-reports/app-that-lists-apps-and-tooling/#approved-solution","title":"Approved solution","text":"<p>We developed a Web app that shows users a lists of apps and libraries. Users can filter on category and search on the names and descriptions of apps and libraries. There are also shapes  for how information about the apps should be published. You find a live version of the app here.</p> <p>Below you find a screenshot of the app.</p> <p></p>"},{"location":"challenge-reports/app-that-lists-apps-and-tooling/#user-flow","title":"User flow","text":""},{"location":"challenge-reports/app-that-lists-apps-and-tooling/#actorsactresses","title":"Actors/actresses","text":"<ul> <li>Web app</li> <li>User of the application</li> </ul>"},{"location":"challenge-reports/app-that-lists-apps-and-tooling/#preconditions","title":"Preconditions","text":"<p>None.</p>"},{"location":"challenge-reports/app-that-lists-apps-and-tooling/#steps","title":"Steps","text":"<ol> <li>The user opens the Web app.</li> <li>The user searched for \"editor\".</li> </ol>"},{"location":"challenge-reports/app-that-lists-apps-and-tooling/#postconditions","title":"Postconditions","text":"<ul> <li>The app shows two apps: \"solideditor\" and \"waceditor\".</li> </ul>"},{"location":"challenge-reports/app-that-lists-apps-and-tooling/#follow-up-actions","title":"Follow-up actions","text":"<p>None.</p>"},{"location":"challenge-reports/app-that-lists-apps-and-tooling/#future-work","title":"Future work","text":"<ul> <li>Users can set their own sources where the app store fetches the information about apps and libraries. Now this is hard-coded.</li> </ul>"},{"location":"challenge-reports/app-that-lists-apps-and-tooling/#contributors","title":"Contributors","text":"<ul> <li>Challenge: Jesse Wright</li> <li>Solution: Pieter Heyvaert</li> <li>Report: Pieter Heyvaert</li> </ul>"},{"location":"challenge-reports/automatically-test-performance-of-each-css-commit/","title":"Automatically test performance of each css commit","text":""},{"location":"challenge-reports/automatically-test-performance-of-each-css-commit/#automatically-test-performance-of-each-community-solid-server-commit-permalink","title":"Automatically test performance of each Community Solid Server commit (permalink)","text":"<p>The corresponding challenge is #23.</p>"},{"location":"challenge-reports/automatically-test-performance-of-each-css-commit/#problem","title":"Problem","text":"<p>Changes to code of Community Solid Server (CSS)  can have an impact on the memory, CPU and even bandwidth usage of the CSS. It would be nice to know this impact for each commit to the CSS repo,  to spot performance impact as soon as possible.</p>"},{"location":"challenge-reports/automatically-test-performance-of-each-css-commit/#approved-solution","title":"Approved solution","text":"<p>We developed the SolidLab Performance Test Server. It offers both a backend and frontend.  The frontend is available at https://testing.solidlab.be/. You find a screenshot of it below. You find more information about  the architecture here. </p> <p></p>"},{"location":"challenge-reports/automatically-test-performance-of-each-css-commit/#follow-up-actions","title":"Follow-up actions","text":"<ul> <li>Improving the performance of the server.</li> <li>Fixing bugs.</li> </ul>"},{"location":"challenge-reports/automatically-test-performance-of-each-css-commit/#future-work","title":"Future work","text":"<ul> <li>Make the server usable for non-CSS tests.</li> </ul>"},{"location":"challenge-reports/automatically-test-performance-of-each-css-commit/#contributors","title":"Contributors","text":"<ul> <li>Challenge: Wim Van de Meerscche</li> <li>Solution: Wim Van de Meerscche</li> <li>Report: Pieter Heyvaert</li> </ul>"},{"location":"challenge-reports/browser-extension-intercepting-urls-to-open-resources-with-user-defined-app/","title":"Browser extension intercepting urls to open resources with user defined app","text":""},{"location":"challenge-reports/browser-extension-intercepting-urls-to-open-resources-with-user-defined-app/#browser-extension-intercepting-urls-to-open-resources-with-user-defined-app-permalink","title":"Browser extension intercepting urls to open resources with user-defined app (permalink)","text":"<p>The corresponding challenge is #45.</p>"},{"location":"challenge-reports/browser-extension-intercepting-urls-to-open-resources-with-user-defined-app/#problem","title":"Problem","text":"<p>In a decentralized Solid world many applications will provide functionality to do one or more specialised actions,  such as browsing files, playing games, creating a Doodle, participating in a Quiz.  In this environment users have a preference for apps they want to use to do some tasks:</p> <ul> <li>When the user wants to browse a pod, she wants to use App X.</li> <li>When the user wants to play chess, she wants to use App Y.</li> <li>When the user wants to edit a text resource, she wants to use App Z.</li> </ul>"},{"location":"challenge-reports/browser-extension-intercepting-urls-to-open-resources-with-user-defined-app/#approved-solution","title":"Approved solution","text":"<p>We developed a browser extension that  allows users to open resources with existing Solid apps via the context menu. You can configure what Web pages and resources are considered by the extension and what specific apps should be used.  Below you see a screenshot of the context menu that appears when right-clinking on a page when the plugin is installed.</p> <p></p>"},{"location":"challenge-reports/browser-extension-intercepting-urls-to-open-resources-with-user-defined-app/#user-flow","title":"User flow","text":""},{"location":"challenge-reports/browser-extension-intercepting-urls-to-open-resources-with-user-defined-app/#actorsactresses","title":"Actors/actresses","text":"<ul> <li>Browser extension</li> <li>User of the extension</li> </ul>"},{"location":"challenge-reports/browser-extension-intercepting-urls-to-open-resources-with-user-defined-app/#preconditions","title":"Preconditions","text":"<ul> <li>The user has installed the extension in the browser.</li> </ul>"},{"location":"challenge-reports/browser-extension-intercepting-urls-to-open-resources-with-user-defined-app/#steps","title":"Steps","text":"<ol> <li>The user visits a Web page that is considered by the extension.</li> <li>The user right-clicks on a resource that is considered by the extension.</li> <li>The extension opens the corresponding Solid app and loads the resource.</li> </ol>"},{"location":"challenge-reports/browser-extension-intercepting-urls-to-open-resources-with-user-defined-app/#postconditions","title":"Postconditions","text":"<ul> <li>The resource is opened in the preferred Solid app based on the extension's configuration.</li> </ul>"},{"location":"challenge-reports/browser-extension-intercepting-urls-to-open-resources-with-user-defined-app/#follow-up-actions","title":"Follow-up actions","text":"<p>None. </p>"},{"location":"challenge-reports/browser-extension-intercepting-urls-to-open-resources-with-user-defined-app/#future-work","title":"Future work","text":"<ul> <li>Advanced functions implementations might consider creating (N3) rules to decide what app to open based on resources/types.</li> </ul>"},{"location":"challenge-reports/browser-extension-intercepting-urls-to-open-resources-with-user-defined-app/#contributors","title":"Contributors","text":"<ul> <li>Challenge: Patrick Hochstenbach</li> <li>Solution: Patrick Hochstenbach</li> <li>Report: Pieter Heyvaert</li> </ul>"},{"location":"challenge-reports/determining-query-equivalence-between-newly-registered-query-and-already-executing-query/","title":"Determining query equivalence between newly registered query and already executing query","text":""},{"location":"challenge-reports/determining-query-equivalence-between-newly-registered-query-and-already-executing-query/#determining-query-equivalence-between-newly-registered-query-and-already-executing-query-permalink","title":"Determining query equivalence between newly registered query and already executing query (permalink)","text":"<p>The corresponding challenge is #106, which contributes to scenario #16. This challenge is an extension of challenge #84.</p>"},{"location":"challenge-reports/determining-query-equivalence-between-newly-registered-query-and-already-executing-query/#problem","title":"Problem","text":"<p>The Solid Stream Aggregator is a service that  aggregates data streams from Solid pods and stores the aggregation in another pod.  This aggregation uses  the LDES in LDP specification.  The user can register queries into the aggregator and  generate a continuous materialized view over the streams stored in the pods.  Moreover, multiple users can register the same query to the aggregator.  On registering the same query,  the aggregator currently instantiates a new process to compute and develop a continuous view.  However, such an approach is resource-consuming and  hinders the scalability of the aggregator.  Therefore, there is a need for the aggregator to determine  if a newly registered query is similar to an already executing query, and  if so, not execute the query again but reuse the results of the already executing query.  The Query Registry component of the aggregator keeps a record of  the queries that are being executed currently and  can be employed to identify query equivalence between  a newly registered query and an already executing one.</p>"},{"location":"challenge-reports/determining-query-equivalence-between-newly-registered-query-and-already-executing-query/#approved-solution","title":"Approved solution","text":"<p>We developed a library to determine  the equivalence between two  RSP-QL  queries. RSP-QL is an extension of SPARQL to support continuous querying of data streams. These queries can work with timestamp-based RDF Stream Processing (RSP) engines. We developed this demo to show how the library works.</p> <p>We made the following important technological decisions and assumptions: - Since we are only interested in demonstrating the functionality of the Query Registry of the Solid Stream Aggregator,  our demo doesn't include the actual aggregation of the different data streams.  In case you wish to run the aggregator with pods and  are interested in the aggregation results,  you can check out this demo.</p>"},{"location":"challenge-reports/determining-query-equivalence-between-newly-registered-query-and-already-executing-query/#user-flow","title":"User flow","text":""},{"location":"challenge-reports/determining-query-equivalence-between-newly-registered-query-and-already-executing-query/#actorsactresses","title":"Actors/actresses","text":"<ul> <li>User of the demo</li> </ul>"},{"location":"challenge-reports/determining-query-equivalence-between-newly-registered-query-and-already-executing-query/#preconditions","title":"Preconditions","text":"<ul> <li>The user has Node.js installed.</li> </ul>"},{"location":"challenge-reports/determining-query-equivalence-between-newly-registered-query-and-already-executing-query/#steps","title":"Steps","text":"<ol> <li>Clone the repository via    <code>shell    git clone https://github.com/argahsuknesib/query-equivalence-demo.git</code></li> <li>Navigate to the folder <code>query-equivalence-demo</code> via    <code>shell    cd query-equivalence-demo</code></li> <li>Install the dependencies via    <code>shell    npm i</code></li> <li>Start the Community Solid Server instance that hosts data used by the queries via    <code>shell    npm run start-solid-server</code></li> <li>Start the aggregator in a separate terminal via    <code>shell    npm run start demo</code></li> <li>Register the first query    <code>sparql    PREFIX saref: &lt;https://saref.etsi.org/core/&gt;     PREFIX dahccsensors: &lt;https://dahcc.idlab.ugent.be/Homelab/SensorsAndActuators/&gt;    PREFIX : &lt;https://rsp.js/&gt;    REGISTER RStream &lt;output&gt; AS    SELECT (AVG(?o) AS ?averageHR1)    FROM NAMED WINDOW :w1 ON STREAM &lt;http://localhost:3000/dataset_participant1/data/&gt; [RANGE 10 STEP 2]    WHERE{        WINDOW :w1 { ?s saref:hasValue ?o .                    ?s saref:relatesToProperty dahccsensors:wearable.bvp .}    }</code>    with the aggregator in a new terminal via    <code>shell    npm run query-one</code>    The aggregator outputs the message <p>The query you have registered is not already executing.</p> </li> <li>Register the second query    <code>sparql    PREFIX saref: &lt;https://saref.etsi.org/core/&gt;    PREFIX dahccsensors: &lt;https://dahcc.idlab.ugent.be/Homelab/SensorsAndActuators/&gt;    PREFIX : &lt;https://rsp.js/&gt;    REGISTER RStream &lt;output&gt; AS    SELECT (AVG(?timestamp) AS ?averageTimestamp)    FROM NAMED WINDOW :w1 ON STREAM &lt;http://localhost:3000/dataset_participant1/data/&gt; [RANGE 10 STEP 2]    WHERE{        WINDOW :w1 { ?s saref:hasTimestamp ?timestamp .}    }</code>    with the aggregator via    <code>shell    npm run query-two</code>    The aggregator outputs the same message <p>The query you have registered is not already executing.</p> </li> </ol> <p>Both queries are on the same data stream source,     but the basic graph patterns are not isomorphic.     Therefore, the aggregator registers both queries. 8. Register the third query    <code>sparql    PREFIX saref: &lt;https://saref.etsi.org/core/&gt;     PREFIX dahccsensors: &lt;https://dahcc.idlab.ugent.be/Homelab/SensorsAndActuators/&gt;    PREFIX : &lt;https://rsp.js/&gt;    REGISTER RStream &lt;output&gt; AS    SELECT (AVG(?o) AS ?averageHR1)    FROM NAMED WINDOW :w1 ON STREAM &lt;http://localhost:3000/dataset_participant1/data/&gt; [RANGE 10 STEP 2]    WHERE{        WINDOW :w1 { ?s saref:hasValue ?o .                    ?s saref:relatesToProperty dahccsensors:wearable.heartRate .}    }</code>    with the aggregator via    <code>shell    npm run query-three</code>    The aggregator outputs the message</p> <p>The query you have registered is not already executing. 9. Register the fourth query    <code>sparql    PREFIX saref: &lt;https://saref.etsi.org/core/&gt;    PREFIX dahccsensors: &lt;https://dahcc.idlab.ugent.be/Homelab/SensorsAndActuators/&gt;    PREFIX : &lt;https://rsp.js/&gt;    REGISTER RStream &lt;output&gt; AS    SELECT (AVG(?o) AS ?averageHR1)    FROM NAMED WINDOW :w1 ON STREAM &lt;http://localhost:3000/dataset_participant1/data/&gt; [RANGE 10 STEP 2]    WHERE{        WINDOW :w1 {            ?subject saref:relatesToProperty dahccsensors:wearable.heartRate .            ?subject saref:hasValue ?object .         }    }</code>    with the aggregator via    <code>shell    npm run query-four</code>    The aggregator outputs the message The query you have registered is already executing.</p> <p>These queries are on the same data stream source and     the basic graph patterns are isomorphic.     Therefore, the aggregator will execute only one of the queries. 10. Register the fifth query    <code>sparql    PREFIX saref: &lt;https://saref.etsi.org/core/&gt;     PREFIX dahccsensors: &lt;https://dahcc.idlab.ugent.be/Homelab/SensorsAndActuators/&gt;    PREFIX : &lt;https://rsp.js/&gt;    REGISTER RStream &lt;output&gt; AS    SELECT (AVG(?object) AS ?averageHR1)    FROM NAMED WINDOW :w1 ON STREAM &lt;http://localhost:3000/dataset_participant1/data/&gt; [RANGE 10 STEP 2]    WHERE{        WINDOW :w1 {            ?subject saref:relatesToProperty dahccsensors:wearable.Accelerometer .            ?subject saref:hasValue ?object .         }    }</code>    with the aggregator via    <code>shell    npm run query-five</code>    The aggregator outputs the message</p> <p>The query you have registered is not already executing. 11. Register the sixth query    <code>sparql    PREFIX saref: &lt;https://saref.etsi.org/core/&gt;     PREFIX dahccsensors: &lt;https://dahcc.idlab.ugent.be/Homelab/SensorsAndActuators/&gt;    PREFIX : &lt;https://rsp.js/&gt;    REGISTER RStream &lt;output&gt; AS    SELECT (AVG(?object) AS ?averageHR1)    FROM NAMED WINDOW :w1 ON STREAM &lt;http://localhost:3000/dataset_participant2/data/&gt; [RANGE 10 STEP 2]    WHERE{        WINDOW :w1 {            ?subject saref:relatesToProperty dahccsensors:wearable.Accelerometer .            ?subject saref:hasValue ?object .        }    }</code>    with the aggregator via       <code>shell       npm run query-six</code>    The aggregator outputs the message The query you have registered is not already executing.</p> <p>For these two queries, the basic graph patterns are isomorphic,     but the data stream sources are different.     In this case, the aggregator will execute both queries.</p>"},{"location":"challenge-reports/determining-query-equivalence-between-newly-registered-query-and-already-executing-query/#postconditions","title":"Postconditions","text":"<p>None.</p>"},{"location":"challenge-reports/determining-query-equivalence-between-newly-registered-query-and-already-executing-query/#follow-up-actions","title":"Follow-up actions","text":"<p>None.</p>"},{"location":"challenge-reports/determining-query-equivalence-between-newly-registered-query-and-already-executing-query/#future-work","title":"Future work","text":"<ul> <li>Support query containment as well as sharing of intermediate RDF result sharing    between data streams.</li> </ul>"},{"location":"challenge-reports/determining-query-equivalence-between-newly-registered-query-and-already-executing-query/#lessons-learned-about-developer-experience","title":"Lessons learned about developer experience","text":"<p>None.</p>"},{"location":"challenge-reports/determining-query-equivalence-between-newly-registered-query-and-already-executing-query/#contributors","title":"Contributors","text":"<ul> <li>Challenge: Kushagra Singh Bisen</li> <li>Solution: Kushagra Singh Bisen</li> <li>Report: Pieter Heyvaert</li> </ul>"},{"location":"challenge-reports/drag-drop-form-builder-to-build-basic-rdf-form-definition/","title":"Drag drop form builder to build basic rdf form definition","text":""},{"location":"challenge-reports/drag-drop-form-builder-to-build-basic-rdf-form-definition/#drag-drop-form-builder-to-build-basic-rdf-form-definition-permalink","title":"Drag &amp; drop form builder to build basic RDF form definition (permalink)","text":"<p>The corresponding challenge is #64.</p>"},{"location":"challenge-reports/drag-drop-form-builder-to-build-basic-rdf-form-definition/#problem","title":"Problem","text":"<p>Create a drag &amp; drop form builder that combines HTML form input fields, and  generates an RDF form definition of the created form.  This RDF form definition should be stored in a preferred Solid location.</p> <p>The basic idea is to start with a Google Forms-like interface but for the generation of RDF data.  This application is one application that can be used in an environment in which:</p> <ul> <li>Form builders can generate an RDF form definition.</li> <li>Form renders that can render an RDF form for end users (e.g. as HTML or as a text menu).</li> <li>Form viewers that can view the generated RDF in a human friendly way.</li> </ul> <p>These three components can work together, for example, so that </p> <ol> <li>a form builder creates a Doodle form, </li> <li>a form renderer makes a HTML version to input the data, and </li> <li>a form viewer generates a nice read-only view.</li> </ol> <p>See also the report \"Form renderer that to view RDF form and store filled-in data in pod\".</p>"},{"location":"challenge-reports/drag-drop-form-builder-to-build-basic-rdf-form-definition/#approved-solution","title":"Approved solution","text":"<p>We developed a Web app  that allows users to create form definitions and share them with other users.  The generated form definition is stored in a user's pod as RDF and  can then be used together with a form renderer to input data.</p> <p>Below you find a screenshot where a form is defined with the following fields:</p> <ul> <li>Title: a text field which binds to <code>dc:title</code></li> <li>Author: a text field which binds to <code>dc:author</code></li> <li>Rating: a dropdown field for which binds to ex:rating. The dropdown should contain these options:</li> <li>\"\u2605 - I don't like it\" binding to <code>ex:NotLikeIt</code></li> <li>\"\u2605\u2605 - It was ok\" binding to <code>ex:ItWasOk</code></li> <li>\"\u2605\u2605\u2605 - I liked it\" binding to <code>ex:LikedIt</code></li> <li>\"\u2605\u2605\u2605\u2605 - I really liked it\" binding to <code>ex:ReallyLikedIt</code></li> <li>Review: a text field which binds to <code>dc:description</code></li> </ul> <p></p>"},{"location":"challenge-reports/drag-drop-form-builder-to-build-basic-rdf-form-definition/#user-flow","title":"User flow","text":""},{"location":"challenge-reports/drag-drop-form-builder-to-build-basic-rdf-form-definition/#actorsactresses","title":"Actors/actresses","text":"<ul> <li>Form generator Web app</li> <li>User of the Web app</li> </ul>"},{"location":"challenge-reports/drag-drop-form-builder-to-build-basic-rdf-form-definition/#preconditions","title":"Preconditions","text":"<ul> <li>The user has a WebID.</li> </ul>"},{"location":"challenge-reports/drag-drop-form-builder-to-build-basic-rdf-form-definition/#steps","title":"Steps","text":"<ol> <li>The user opens the Web app.</li> <li>The user logs in with their WebID.</li> <li>The user drags fields from the panel on the left side to the panel on the right.</li> <li>The user fills in the details of the fields. See the example form in the \"Approved solution\" section.</li> <li>The user click on the button \"Save\".</li> <li>The app shows a notification confirming that the data is saved at the resource mentioned at the top.</li> </ol>"},{"location":"challenge-reports/drag-drop-form-builder-to-build-basic-rdf-form-definition/#postconditions","title":"Postconditions","text":"<ul> <li>The form is stored in the user's pod at the resource mentioned at the top.</li> </ul>"},{"location":"challenge-reports/drag-drop-form-builder-to-build-basic-rdf-form-definition/#follow-up-actions","title":"Follow-up actions","text":"<p>None.</p>"},{"location":"challenge-reports/drag-drop-form-builder-to-build-basic-rdf-form-definition/#future-work","title":"Future work","text":"<p>None.</p>"},{"location":"challenge-reports/drag-drop-form-builder-to-build-basic-rdf-form-definition/#contributors","title":"Contributors","text":"<ul> <li>Challenge: Patrick Hochstenbach</li> <li>Solution: Patrick Hochstenbach</li> <li>Report: Pieter Heyvaert</li> </ul>"},{"location":"challenge-reports/edit-pod-files-in-vs-code/","title":"Edit pod files in vs code","text":""},{"location":"challenge-reports/edit-pod-files-in-vs-code/#edit-pod-files-in-visual-studio-code-permalink","title":"Edit pod files in Visual Studio Code (permalink)","text":"<p>The corresponding challenge is #80.</p>"},{"location":"challenge-reports/edit-pod-files-in-vs-code/#problem","title":"Problem","text":"<p>The goal is to create a Visual Studio Code extension similar to remote SSH that  allows you to edit files on a remote pod as if they were directly on your machine.  This removes the barrier of entry for developers and admins,  because it allows them to </p> <ul> <li>better understand what data is in the pods, and  </li> <li>edit the data in the pods.</li> </ul>"},{"location":"challenge-reports/edit-pod-files-in-vs-code/#approved-solution","title":"Approved solution","text":"<p>We developed an extension that allows users to </p> <ul> <li>open directories (containers)</li> <li>open files (resources)</li> <li>delete files (resources)</li> <li>create files (resources)</li> <li>modify files (resources)</li> </ul> <p>You can watch a screencast here. The source code of the extension is not publicly available.</p>"},{"location":"challenge-reports/edit-pod-files-in-vs-code/#follow-up-actions","title":"Follow-up actions","text":"<p>None.</p>"},{"location":"challenge-reports/edit-pod-files-in-vs-code/#future-work","title":"Future work","text":"<p>None.</p>"},{"location":"challenge-reports/edit-pod-files-in-vs-code/#contributors","title":"Contributors","text":"<ul> <li>Challenge: Jesse Wright</li> <li>Solution: Jesse Wright</li> <li>Report: Pieter Heyvaert</li> </ul>"},{"location":"challenge-reports/external-service-stores-calendar-in-pod/","title":"External service stores calendar in pod","text":""},{"location":"challenge-reports/external-service-stores-calendar-in-pod/#external-service-stores-calendar-in-pod-permalink","title":"External service stores calendar in pod (permalink)","text":"<p>The corresponding challenge is #68, which contributes to scenario #2.</p>"},{"location":"challenge-reports/external-service-stores-calendar-in-pod/#problem","title":"Problem","text":"<p>At the moment it's possible to request a calendar from a CSS instance through the use of  a store.  But this solution is coupled to the implementation of CSS.  A better solution would be to have an external service that reads the original calendar and  stores it in a pod using only the methods specified by Solid.</p>"},{"location":"challenge-reports/external-service-stores-calendar-in-pod/#approved-solution","title":"Approved solution","text":"<p>Oxford HCC developed an orchestrator that allows users to configure an automatic process that periodically retrieves their calendars,  converts them to RDF, and stores them on their pods.</p> <p>The repository contains both a frontend and  a backend, but only the backend is relevant for challenge #68 and this report.</p>"},{"location":"challenge-reports/external-service-stores-calendar-in-pod/#user-flow","title":"User flow","text":""},{"location":"challenge-reports/external-service-stores-calendar-in-pod/#actorsactresses","title":"Actors/actresses","text":"<ul> <li>User of the orchestrator</li> </ul>"},{"location":"challenge-reports/external-service-stores-calendar-in-pod/#preconditions","title":"Preconditions","text":"<ul> <li>The user has a calendar that is available in the ICS format. We assume for the steps below that the calendar is available at <code>http://localhost:8080/parties.ics</code>. It contains one event on 2023-03-17 that starts on 13:00 and ends at 19:00.</li> <li>The user has a WebID. We assume for the steps below that the WebID is <code>https://pod.playground.solidlab.be/ash/profile/card#me</code>.</li> <li>The user has a pod where the calendar and the configuration of the orchestrator can be stored. We assume for the steps below that the pod is located at <code>https://pod.playground.solidlab.be/ash/</code>, with <code>https://pod.playground.solidlab.be/</code> as identify provider.</li> <li>The WebID has a <code>http://www.w3.org/ns/pim/space#storage</code> triple.  See the Solid WebID Profile. For the WebID <code>https://pod.playground.solidlab.be/ash/profile/card#me</code> we added the triple    <code>turtle     &lt;#me&gt; &lt;http://www.w3.org/ns/pim/space#storage&gt; &lt;https://pod.playground.solidlab.be/ash/&gt;.</code></li> <li>The user has HTTPie installed on their local machine.</li> </ul>"},{"location":"challenge-reports/external-service-stores-calendar-in-pod/#steps","title":"Steps","text":"<ol> <li>Clone the orchestrator  via <code>git clone https://github.com/renyuneyun/calendar-orchestrator.git</code>.</li> <li>Navigate to the <code>core</code> folder via <code>cd calendar-orchestrator/core</code>.</li> <li>Install the dependencies via <code>npm i</code>.</li> <li>Run the orchestrator via <code>npm run build &amp;&amp; npm run start</code>.</li> <li>Open a new terminal.</li> <li>Register the user via    <code>shell     http POST localhost:3000/user webid=https://pod.playground.solidlab.be/ash/profile/card#me issuer=https://pod.playground.solidlab.be/ email=ash@example.com password=ash</code></li> <li>Get the user's information via    <code>shell    http GET localhost:3000/user webid=https://pod.playground.solidlab.be/ash/profile/card#me</code></li> <li>Set user's calendar URL via    <code>shell    http POST localhost:3000/user webid=https://pod.playground.solidlab.be/ash/profile/card#me issuer=https://pod.playground.solidlab.be/ cal_url=http://localhost:8080/parties.ics</code></li> <li>Update user's calendar data    <code>shell    http POST localhost:3000/user webid=https://pod.playground.solidlab.be/ash/profile/card#me issuer=https://pod.playground.solidlab.be/</code></li> </ol>"},{"location":"challenge-reports/external-service-stores-calendar-in-pod/#postconditions","title":"Postconditions","text":"<p>Find the availability calendar at <code>https://pod.playground.solidlab.be/ash/availability</code>. This is a snippet of the calendar:    ```turtle    @prefix schema: http://schema.org/ .</p> <p>http://example.com/calendar/Combined%20of%20%5BParties%5D      schema:name \"Combined of [Parties]\" ;      schema:event http://example.com/event/testslots%2344d9bc3d66678dcec46126811e0e37e8, http://example.com/event/testslots%2395d06256acd59357e29d03548d07ba05, http://example.com/event/testslots%2374e20e44bcf40b919566183d57a01c09, http://example.com/event/testslots%230f587780948fda83412ab1d0112822ae, http://example.com/event/testslots%23a16dd8c62219f1692d5d174804046b29, http://example.com/event/testslots%2300f0b72dad0bdee2b388b69eb867c91f, http://example.com/event/testslots%238079034d03b5eacc35043a725f034037, http://example.com/event/testslots%23cccfb8cb19de7514031561d37843a372.</p> <p>http://example.com/event/testslots%2344d9bc3d66678dcec46126811e0e37e8      a schema:Event ;      schema:name \"Available for meetings\" ;      schema:startDate \"2023-03-08T10:00:00.000Z\" ;      schema:endDate \"2023-03-08T18:00:00.000Z\" .</p> <p>http://example.com/event/testslots%2395d06256acd59357e29d03548d07ba05      a schema:Event ;      schema:name \"Available for meetings\" ;      schema:startDate \"2023-03-09T10:00:00.000Z\" ;      schema:endDate \"2023-03-09T18:00:00.000Z\" .</p> <p>http://example.com/event/testslots%2374e20e44bcf40b919566183d57a01c09      a schema:Event ;      schema:name \"Available for meetings\" ;      schema:startDate \"2023-03-10T10:00:00.000Z\" ;      schema:endDate \"2023-03-10T18:00:00.000Z\" .</p> <p>http://example.com/event/testslots%230f587780948fda83412ab1d0112822ae      a schema:Event ;      schema:name \"Available for meetings\" ;      schema:startDate \"2023-03-13T10:00:00.000Z\" ;      schema:endDate \"2023-03-13T18:00:00.000Z\" .</p> <p>http://example.com/event/testslots%23a16dd8c62219f1692d5d174804046b29      a schema:Event ;      schema:name \"Available for meetings\" ;      schema:startDate \"2023-03-14T10:00:00.000Z\" ;      schema:endDate \"2023-03-14T18:00:00.000Z\" .</p> <p>http://example.com/event/testslots%2300f0b72dad0bdee2b388b69eb867c91f      a schema:Event ;      schema:name \"Available for meetings\" ;      schema:startDate \"2023-03-15T10:00:00.000Z\" ;      schema:endDate \"2023-03-15T18:00:00.000Z\" .</p> <p>http://example.com/event/testslots%238079034d03b5eacc35043a725f034037      a schema:Event ;      schema:name \"Available for meetings\" ;      schema:startDate \"2023-03-16T10:00:00.000Z\" ;      schema:endDate \"2023-03-16T18:00:00.000Z\" .</p> <p>http://example.com/event/testslots%23cccfb8cb19de7514031561d37843a372      a schema:Event ;      schema:name \"Available for meetings\" ;      schema:startDate \"2023-03-17T10:00:00.000Z\" ;      schema:endDate \"2023-03-17T13:00:00.000Z\" .    ```</p> <p>On 2023-03-17 there is an event from 13:00 till 19:00 as defined by the ICS calendar at <code>http://localhost:8080/parties.ics</code>. Therefore, on that date the user is only available until 13:00.</p>"},{"location":"challenge-reports/external-service-stores-calendar-in-pod/#follow-up-actions","title":"Follow-up actions","text":"<ul> <li>Check for similarities and differences with Koreografeye.</li> </ul>"},{"location":"challenge-reports/external-service-stores-calendar-in-pod/#future-work","title":"Future work","text":"<p>None.</p>"},{"location":"challenge-reports/external-service-stores-calendar-in-pod/#contributors","title":"Contributors","text":"<ul> <li>Challenge: Pieter Heyvaert</li> <li>Solution: Zimeng Zhou, Rui Zhao</li> <li>Report: Pieter Heyvaert</li> </ul>"},{"location":"challenge-reports/form-renderer-to-view-form-store-data/","title":"Form renderer to view form store data","text":""},{"location":"challenge-reports/form-renderer-to-view-form-store-data/#form-renderer-that-to-view-rdf-form-and-store-filled-in-data-in-pod-permalink","title":"Form renderer that to view RDF form and store filled-in data in pod (permalink)","text":"<p>The corresponding challenge is #65.</p>"},{"location":"challenge-reports/form-renderer-to-view-form-store-data/#problem","title":"Problem","text":"<p>Create a form renderer that can render an RDF form definition. In this application users can in a declarative way point to </p> <ul> <li>the RDF form definition, </li> <li>the RDF data, and</li> <li>the resource on a Solid pod where the data should be stored.</li> </ul> <p>This application is one application that can be used in an environment in which:</p> <ul> <li>Form builders can generate an RDF form definition.</li> <li>Form renders that can render an RDF form for end users (e.g. as HTML or as a text menu).</li> <li>Form viewers that can view the generated RDF in a human friendly way.</li> </ul> <p>These three components can work together, for example, so that</p> <ol> <li>a form builder creates a Doodle form,</li> <li>a form renderer makes a HTML version to input the data, and</li> <li>a form viewer generates a nice read-only view.</li> </ol> <p>See also the report \"Drag &amp; drop form builder to build basic RDF form definition\".</p>"},{"location":"challenge-reports/form-renderer-to-view-form-store-data/#approved-solution","title":"Approved solution","text":"<p>We developed a Web app  that allows users to</p> <ul> <li>view an RDF form, and</li> <li>fill in the data.</li> </ul> <p>You find a screenshot below for a book review form:</p> <p></p> <p>In the screenshot, you see the following components:</p> <ul> <li>\"Login\" button: log in with your Solid pod.</li> <li>\"Show details\" button: show details about the form and where the filled-in data is stored.</li> <li>\"New form\" button: load a new form.</li> <li>\"Instructions\" text field:  nstructions related to the form.</li> <li>\"Title\" text field: title of the book review.</li> <li>\"Author\" text field: author of the book.</li> <li>\"Rate this book\" dropdown field: rating you give the book.</li> <li>\"Review\" text field: review of the book.</li> <li>\"Save\" button: save the form.</li> </ul>"},{"location":"challenge-reports/form-renderer-to-view-form-store-data/#user-flow","title":"User flow","text":""},{"location":"challenge-reports/form-renderer-to-view-form-store-data/#actorsactresses","title":"Actors/actresses","text":"<ul> <li>Form viewer Web app</li> <li>User of the Web app</li> </ul>"},{"location":"challenge-reports/form-renderer-to-view-form-store-data/#preconditions","title":"Preconditions","text":"<p>None.</p>"},{"location":"challenge-reports/form-renderer-to-view-form-store-data/#steps","title":"Steps","text":"<ol> <li>The user opens the Web app at https://formviewer.patrickhochstenbach.net/?rft.form=https%3A%2F%2Fformviewer.patrickhochstenbach.net%2Fbook-review.form.ttl</li> <li>The user fills in the details of the fields. See the example form in the \"Approved solution\" section.</li> <li>The user click on the button \"Save\".</li> <li>The app shows a notification confirming that the data is saved at the resource mentioned in the details. You see the details by clicking on the button \"Show details\".</li> </ol>"},{"location":"challenge-reports/form-renderer-to-view-form-store-data/#postconditions","title":"Postconditions","text":"<ul> <li>The filled-in data is stored at the resource mentioned in the details.</li> </ul>"},{"location":"challenge-reports/form-renderer-to-view-form-store-data/#follow-up-actions","title":"Follow-up actions","text":"<p>None.</p>"},{"location":"challenge-reports/form-renderer-to-view-form-store-data/#future-work","title":"Future work","text":"<p>None.</p>"},{"location":"challenge-reports/form-renderer-to-view-form-store-data/#contributors","title":"Contributors","text":"<ul> <li>Challenge: Patrick Hochstenbach</li> <li>Solution: Patrick Hochstenbach</li> <li>Report: Pieter Heyvaert</li> </ul>"},{"location":"challenge-reports/greet-user-with-their-preferred-name/","title":"Greet user with their preferred name","text":""},{"location":"challenge-reports/greet-user-with-their-preferred-name/#greet-user-with-preferred-name-permalink","title":"Greet user with preferred name (permalink)","text":"<p>The corresponding challenge is #4.</p>"},{"location":"challenge-reports/greet-user-with-their-preferred-name/#problem","title":"Problem","text":"<p>Users like to be addressed by their preferred name within apps. This is a name that they are known as, or use for themselves.  In some cultures, this is the first name. It could also be a user-chosen name or nickname. Other cultures do not have the concept of a first name, so another strategy is needed.</p>"},{"location":"challenge-reports/greet-user-with-their-preferred-name/#approved-solution","title":"Approved solution","text":"<p>We developed a Web app that shows users their preferred name based on  a set of N3 rules.</p>"},{"location":"challenge-reports/greet-user-with-their-preferred-name/#user-flow","title":"User flow","text":""},{"location":"challenge-reports/greet-user-with-their-preferred-name/#actorsactresses","title":"Actors/actresses","text":"<ul> <li>Web app</li> <li>User of the application</li> </ul>"},{"location":"challenge-reports/greet-user-with-their-preferred-name/#preconditions","title":"Preconditions","text":"<ul> <li>The user has started the Web app via these instructions.</li> <li>The user has a WebID with at least one of these predicates.</li> </ul>"},{"location":"challenge-reports/greet-user-with-their-preferred-name/#steps","title":"Steps","text":"<ol> <li>The user opens the Web app.</li> <li>The user logs in with their WebID.</li> </ol>"},{"location":"challenge-reports/greet-user-with-their-preferred-name/#postconditions","title":"Postconditions","text":"<ul> <li>The user sees their preferred name in the Web app.</li> </ul>"},{"location":"challenge-reports/greet-user-with-their-preferred-name/#follow-up-actions","title":"Follow-up actions","text":"<ul> <li>Add a function to get a person's preferred name to SolidLabLib.js (issue).</li> </ul>"},{"location":"challenge-reports/greet-user-with-their-preferred-name/#future-work","title":"Future work","text":"<p>None.</p>"},{"location":"challenge-reports/greet-user-with-their-preferred-name/#contributors","title":"Contributors","text":"<ul> <li>Challenge: Ruben Verborgh</li> <li>Solution: Sindhu Vasireddy</li> <li>Report: Pieter Heyvaert</li> </ul>"},{"location":"challenge-reports/menubar-app-to-check-who-is-on-vacation/","title":"Menubar app to check who is on vacation","text":""},{"location":"challenge-reports/menubar-app-to-check-who-is-on-vacation/#menubar-app-to-check-who-is-on-vacation-permalink","title":"Menubar app to check who is on vacation (permalink)","text":"<p>The corresponding challenge is #92.</p>"},{"location":"challenge-reports/menubar-app-to-check-who-is-on-vacation/#problem","title":"Problem","text":"<p>Manually checking your calendar to quickly see who is on vacation is a hassle.  It would be easier to have menubar app that shows in a glance who is on vacation today.</p>"},{"location":"challenge-reports/menubar-app-to-check-who-is-on-vacation/#approved-solution","title":"Approved solution","text":"<p>We developed a menubar app that shows who is when on vacation. You find a screencast of the app here and below you find a screenshot.</p> <p></p> <p>We made the following important technological decisions and assumptions: - We use the Community Solid Server-specific   Client Credentials   to log in and authenticate.   There is an ongoing discussion in   the Solid-OIDC spec regarding   the need for something like Client Credentials. - We use Electron because it allows us to reuse existing JavaScript libraries and    make the app cross-platform. - Users have to manually provide the urls of the vacation calendars.   We didn't include the automatic discovery of this information. - We assume that the vacation calendar lists the dates via the predicate <code>https://data.knows.idlab.ugent.be/person/office/#date</code>. - We assume that the name in the WebID is provided via the predicate <code>http://schema.org/name</code>.</p>"},{"location":"challenge-reports/menubar-app-to-check-who-is-on-vacation/#user-flow","title":"User flow","text":""},{"location":"challenge-reports/menubar-app-to-check-who-is-on-vacation/#actorsactresses","title":"Actors/actresses","text":"<ul> <li>Menubar app</li> <li>User of the application</li> </ul>"},{"location":"challenge-reports/menubar-app-to-check-who-is-on-vacation/#preconditions","title":"Preconditions","text":"<ul> <li>The user has Node.js installed.</li> </ul>"},{"location":"challenge-reports/menubar-app-to-check-who-is-on-vacation/#steps","title":"Steps","text":"<ol> <li>Clone the repo of the app via    <code>shell    git clone https://github.com/SolidLabResearch/solid-menubar-app.git</code></li> <li>Install the dependencies via    <code>npm i</code></li> <li>Navigate to the folder <code>pod-example-data</code> via    <code>cd pod-example-data</code></li> <li>Populate the test pods on the SolidLab Playground via     <code>shell    node create-example-pods.js</code></li> <li>Go back to the root of the repo via    <code>shell    cd ..</code></li> <li>Copy the example config file that works with the test pods via    <code>shell    cp pod-example-data/config.json config.json</code></li> <li>Start the app via     <code>shell    npm start</code></li> <li>The app appears in the menubar. The icon is an umbrella on a beach.</li> </ol>"},{"location":"challenge-reports/menubar-app-to-check-who-is-on-vacation/#postconditions","title":"Postconditions","text":"<ul> <li>When you click on the icon, it shows the vacation days.</li> </ul>"},{"location":"challenge-reports/menubar-app-to-check-who-is-on-vacation/#follow-up-actions","title":"Follow-up actions","text":"<ul> <li>Clarify use of the Community Solid Server-specific  Client Credentials in  the README of the app (issue).</li> <li>The app stores the id and secret used by the Client Credentials in a JSON file on the disk of the user. Are there suggestions on how to make this safer (issue)?</li> <li>Clarify why the app does not use BashLib (issue).</li> <li>Regarding the code to populate the test pods:</li> <li>Investigate if this code should be in a separate library (issue).</li> <li>Clarify why this code did not use BashLib (issue).</li> </ul>"},{"location":"challenge-reports/menubar-app-to-check-who-is-on-vacation/#future-work","title":"Future work","text":"<ul> <li>There is an ongoing discussion in  the Solid-OIDC spec regarding  the need for something like Client Credentials. We also have a challenge about that.</li> <li>How can the app use Solid-OIDC for authentication instead of Client Credentials (issue)? That way the app works with all Solid identity providers.</li> </ul>"},{"location":"challenge-reports/menubar-app-to-check-who-is-on-vacation/#contributors","title":"Contributors","text":"<ul> <li>Challenge: Pieter Heyvaert</li> <li>Solution: Pieter Heyvaert</li> <li>Report: Pieter Heyvaert</li> </ul>"},{"location":"challenge-reports/public-css-instance-for-testing/","title":"Public css instance for testing","text":""},{"location":"challenge-reports/public-css-instance-for-testing/#public-community-solid-server-instance-for-testing-permalink","title":"Public Community Solid Server instance for testing (permalink)","text":"<p>The corresponding challenge is #75.</p>"},{"location":"challenge-reports/public-css-instance-for-testing/#problem","title":"Problem","text":"<p>It would be great to have a public Community Solid Server (CSS) instance that can be used for testing.  That way developers can quickly make an account to test or demo an application.</p>"},{"location":"challenge-reports/public-css-instance-for-testing/#approved-solution","title":"Approved solution","text":"<p>We deployed a CSS instance at https://pod.playground.solidlab.be/. Users can make accounts and  have complete control over their data. The instance is reset every 24 hours, specifically at 5:00 local time in Belgium. During every reset the latest version of CSS is used. It's possible to initiate the instance with a predefined set of accounts and corresponding data. You provide the predefined accounts as follows:</p> <pre><code>[\n  {\n    \"podName\": \"user1\",\n    \"email\": \"user1@pod.playground.solidlab.be\",\n    \"password\": \"user1\"\n  },\n  ...\n  {\n    \"podName\": \"user10\",\n    \"email\": \"user10@pod.playground.solidlab.be\",\n    \"password\": \"user10\"\n  }\n]\n</code></pre> <p>Please contact Pieter Heyvaert if you would like to add predefined accounts.</p>"},{"location":"challenge-reports/public-css-instance-for-testing/#follow-up-actions","title":"Follow-up actions","text":"<p>None.</p>"},{"location":"challenge-reports/public-css-instance-for-testing/#future-work","title":"Future work","text":"<p>None.</p>"},{"location":"challenge-reports/public-css-instance-for-testing/#contributors","title":"Contributors","text":"<ul> <li>Challenge: Pieter Heyvaert</li> <li>Solution: Thijs Walcarius</li> <li>Report: Pieter Heyvaert</li> </ul>"},{"location":"challenge-reports/read-and-write-data-in-web-app-relying-on-solid-authentication-browser-extension/","title":"Read and write data in web app relying on solid authentication browser extension","text":""},{"location":"challenge-reports/read-and-write-data-in-web-app-relying-on-solid-authentication-browser-extension/#read-and-write-data-in-web-app-relying-on-solid-authentication-browser-extension-permalink","title":"Read and write data in Web app relying on Solid authentication browser extension (permalink)","text":"<p>The corresponding challenge is #102.</p>"},{"location":"challenge-reports/read-and-write-data-in-web-app-relying-on-solid-authentication-browser-extension/#problem","title":"Problem","text":"<p>The goal of this browser extension is that requests are  automatically authenticated when needed.  Using this we can show that a Web app can be created that reads data from and stores data  in a protected resources in a pod without the need for including Solid authentication in the Web app.</p>"},{"location":"challenge-reports/read-and-write-data-in-web-app-relying-on-solid-authentication-browser-extension/#approved-solution","title":"Approved solution","text":"<p>We developed a Web app that allows  users to edit Markdown files using only GET and PUT requests. It has the following features:</p> <ul> <li>Load Markdown files via GET requests.</li> <li>Store Markdown files via PUT requests.</li> <li>Show WebID of user if user has logged in with the Solid Authentication browser extension.</li> <li>WebID and browser extension are not needed when working with public resources.</li> <li>Show urls of most recent files. The urls are stored in the browser storage.</li> </ul> <p>You find a live version of the app here and  a screencast of the app here.</p> <p>We made the following important technological decisions and assumptions: - The tool relies on the Solid authentication browser extension for requests that required authentication.  No fallback is provided for when the extension is not installed.  - The user knows where a new resource should be stored on the pod.  They manually provide the full URL of the resource in a text-field.</p>"},{"location":"challenge-reports/read-and-write-data-in-web-app-relying-on-solid-authentication-browser-extension/#user-flow","title":"User flow","text":""},{"location":"challenge-reports/read-and-write-data-in-web-app-relying-on-solid-authentication-browser-extension/#actorsactresses","title":"Actors/actresses","text":"<ul> <li>Menubar app</li> <li>User of the application</li> </ul>"},{"location":"challenge-reports/read-and-write-data-in-web-app-relying-on-solid-authentication-browser-extension/#preconditions","title":"Preconditions","text":"<ul> <li>The user has Node.js installed.</li> <li>The user has this version of  the Solid authentication browser extension installed.</li> <li>The user has a WebID and pod. You can create both for testing via the Pod Playground of SolidLab.</li> <li>The user has logged in with their WebID in the browser extension.</li> </ul>"},{"location":"challenge-reports/read-and-write-data-in-web-app-relying-on-solid-authentication-browser-extension/#steps","title":"Steps","text":"<ol> <li>Clone the repo of the app via    <code>shell    git clone https://github.com/SolidLabResearch/markdown-editor.git</code></li> <li>Install the dependencies via    <code>shell    npm i</code></li> <li>Start the server via    <code>shell    npm start</code></li> <li>Open Firefox and browse to http://localhost:8080/.</li> <li>In the text field at the top enter the URL for a new Markdown resource on your pod.</li> <li>Edit the Markdown file.</li> <li>The app automatically saves your changes.</li> </ol>"},{"location":"challenge-reports/read-and-write-data-in-web-app-relying-on-solid-authentication-browser-extension/#postconditions","title":"Postconditions","text":"<ul> <li>Open the resource in a new tab in your browser.    You don't need the app to see its content.   Note that the Community Solid Server   will not show the Markdown file directly, but   a rendered HTML version instead.</li> </ul>"},{"location":"challenge-reports/read-and-write-data-in-web-app-relying-on-solid-authentication-browser-extension/#follow-up-actions","title":"Follow-up actions","text":"<p>None.</p>"},{"location":"challenge-reports/read-and-write-data-in-web-app-relying-on-solid-authentication-browser-extension/#future-work","title":"Future work","text":"<p>None.</p>"},{"location":"challenge-reports/read-and-write-data-in-web-app-relying-on-solid-authentication-browser-extension/#contributors","title":"Contributors","text":"<ul> <li>Challenge: Pieter Heyvaert</li> <li>Solution: Pieter Heyvaert</li> <li>Report: Pieter Heyvaert</li> </ul>"},{"location":"challenge-reports/store-manage-share-and-query-location-history-data/","title":"Store manage share and query location history data","text":""},{"location":"challenge-reports/store-manage-share-and-query-location-history-data/#store-manage-share-and-query-location-history-data-permalink","title":"Store, manage, share and query location (history) data (permalink)","text":"<p>The corresponding challenge is #10.</p>"},{"location":"challenge-reports/store-manage-share-and-query-location-history-data/#problem","title":"Problem","text":"<p>Your location and its history are a valuable source of information for applications to offer you  a more contextual user experience.</p> <p>You could for example do the following:</p> <ul> <li>Share your current location (temporarily) with a friend without sending it to a different server.</li> <li>Annotate your location history with the mode of transport you were using at that time.  This allows to analyse after a certain period your mobility behavior and  whether using a different mode would\u2019ve saved you time and money  (like https://savewithcarsharing.be/, but then without manual data entry and with client-side query evaluation).</li> <li>Use your location history to check where a certain picture in your pod was taken.</li> <li>Look-up when you were at a certain location in the past.</li> </ul>"},{"location":"challenge-reports/store-manage-share-and-query-location-history-data/#approved-solution","title":"Approved solution","text":"<p>We developed a Web app that allow users to capture their location from browser after logging in with their WebID. The app stores the user's raw location data as RDF which is validated against a SHACL shape.  The user can also request location from other users using their WebID.  These requests can be approved or revoked.</p> <p>You find the live version here and a screencast of a demo here. The screencast doesn't contain audio.</p> <p>Below you find sequence diagrams that explain how to</p> <ol> <li>Set up location capture</li> <li>Request friend's location</li> <li>Approve location sharing</li> <li>Fetch friend's location</li> <li>Revoke location sharing</li> </ol> <p></p> <p></p> <p></p> <p></p> <p></p>"},{"location":"challenge-reports/store-manage-share-and-query-location-history-data/#user-flow","title":"User flow","text":""},{"location":"challenge-reports/store-manage-share-and-query-location-history-data/#actorsactresses","title":"Actors/actresses","text":"<ul> <li>Web app</li> <li>Two users of the application, called User 1 and User 2.</li> </ul>"},{"location":"challenge-reports/store-manage-share-and-query-location-history-data/#preconditions","title":"Preconditions","text":"<ul> <li>The user has a WebID.</li> </ul>"},{"location":"challenge-reports/store-manage-share-and-query-location-history-data/#steps","title":"Steps","text":"<ol> <li>User 1 opens the Web app.</li> <li>User 1 logs in with their pod.</li> <li>User 1 clicks on the button \"Post Location History\".</li> <li>The browser asks the user if the app can know the user's location.</li> <li>User 1 clicks on the button \"Allow\".</li> <li>The app shows a map.</li> <li>The app shows the coordinates of the user's location underneath the map.</li> <li>User 2 opens the Web app.</li> <li>User 2 logs in with their pod.</li> <li>User 2 clicks on the button \"Post Location History\".</li> <li>The browser asks the user if the app can know the user's location.</li> <li>User 2 clicks on the button \"Allow\".</li> <li>User 2 clicks on the button \"Request Friend's Location\".</li> <li>User 2 enters the WebID of User 1.</li> <li>User 1 clicks on the button \"Approve [WebID]\", where <code>[WebID]</code> is the WebID of User 2.</li> <li>User 2 sees the image of User 1 on their map.</li> <li>User 1 clicks on the button \"Revoke [WebID]\", where <code>[WebID]</code> is the WebID of User 2.</li> <li>User 2 no longer sees the image of User 1 on their map.</li> </ol> <p>You can see these steps also in this screencast. The screencast doesn't contain audio.</p>"},{"location":"challenge-reports/store-manage-share-and-query-location-history-data/#postconditions","title":"Postconditions","text":"<p>None.</p>"},{"location":"challenge-reports/store-manage-share-and-query-location-history-data/#follow-up-actions","title":"Follow-up actions","text":"<p>None.</p>"},{"location":"challenge-reports/store-manage-share-and-query-location-history-data/#future-work","title":"Future work","text":"<ul> <li>An extension that abstracts away the complexities of permissions for resource sharing between users and apps</li> </ul>"},{"location":"challenge-reports/store-manage-share-and-query-location-history-data/#contributors","title":"Contributors","text":"<ul> <li>Challenge: Pieter Colpaert</li> <li>Solution: Sindhu Vasireddy</li> <li>Report: Pieter Heyvaert</li> </ul>"},{"location":"challenge-reports/storing-large-real-time-data-streams-in-pod-using-LDES/","title":"storing large real time data streams in pod using LDES","text":""},{"location":"challenge-reports/storing-large-real-time-data-streams-in-pod-using-LDES/#storing-large-real-time-data-streams-in-pod-using-ldes-permalink","title":"Storing large real-time data streams in pod using LDES (permalink)","text":"<p>The corresponding challenge is #82, which contributes to scenario #16.</p>"},{"location":"challenge-reports/storing-large-real-time-data-streams-in-pod-using-LDES/#problem","title":"Problem","text":"<p>Data streams are becoming omnipresent and  are a crucial component in many use cases.  Storing streams in a low-cost file-based Web environment could be done using  Linked Data Event Streams (LDES).  However, pushing large volumes of high volatile data into a Solid-based LDES is not possible because  the current solution does the partitioning of the data  after all data has been retrieved,  instead of in a streaming fashion.  This crashes the Community Solid Server  due to the high load on the server  when repartitioning large amounts of data. We use data from the DAHCC dataset for this challenge, which contains data streams describing the behaviour of various patients. The streams contain over 100.000 events.</p> <p>We want a streaming Solid-based LDES connector that replays data and  partitions this data in a streaming fashion when retrieving the data,  instead of needing to wait till the whole dataset is received. Besides avoid the high load on the server, replaying allows to mimic the real-time behaviour of data streams, even though the data is historical data. This allows to showcase how solutions can process live data streams and how they can handle different data rates.</p>"},{"location":"challenge-reports/storing-large-real-time-data-streams-in-pod-using-LDES/#approved-solution","title":"Approved solution","text":"<p>We developed a tool that replays captured streams.  The tool has the following features:</p> <ul> <li>The tool is pull-based as it pulls the observations from n-triples files.</li> <li>The tool adds new events to the right bucket.</li> <li>If new buckets are required, the tool updates the LDES.</li> <li>The user can parameterize the bucket size.</li> </ul> <p>The repository contains both a Web app and a engine, but only the engine is relevant for challenge #82 and this report.</p> <p>The solution builds on this code. The code is not included as a dependency as it was not designed as a library. We copy and pasted the parts of the code that were useful for our solution.</p> <p>We made the following important technological decisions and assumptions:</p> <ul> <li>JavaScript/TypeScript as main development language to be in-line with current practices.</li> <li>LDES to represent a stream of events detected by IOT-related devices.</li> <li>Implements paginated to support loading large datasets.</li> <li>Data sources are N-triples files, as they represent the state of the devices and observations    as originally persisted using Apache Feather.</li> <li>Single-user demonstration implementation, as the main goal is validating the approach,    not developing a industry-ready implementation.</li> <li>N3.js for streaming and high-throughput handling of RDF data.</li> <li>Implements recursive version of the merge sort algorithm    to sort the observation based on timestamp (configurable).</li> <li>Implements pointer-based algorithm to keep track of last observation/event that has been replayed.    The pointer can be advanced according to either the ordering by the end-user or automatically.</li> <li>Implements optimisation to manage the size of the pods.</li> </ul>"},{"location":"challenge-reports/storing-large-real-time-data-streams-in-pod-using-LDES/#user-flow","title":"User flow","text":""},{"location":"challenge-reports/storing-large-real-time-data-streams-in-pod-using-LDES/#actorsactresses","title":"Actors/actresses","text":"<ul> <li>User of the tool</li> </ul>"},{"location":"challenge-reports/storing-large-real-time-data-streams-in-pod-using-LDES/#preconditions","title":"Preconditions","text":"<p>Configure the engine via the following steps:</p> <ol> <li>Clone the repository via    <code>shell    git clone https://github.com/SolidLabResearch/LDES-in-SOLID-Semantic-Observations-Replay</code></li> <li>Navigate to <code>LDES-in-SOLID-Semantic-Observations-Replay</code> via    <code>shell    cd LDES-in-SOLID-Semantic-Observations-Replay</code></li> <li>Start an instance of the Community Solid Server via    <code>shell    docker run --rm -p 3000:3000 -it solidproject/community-server:latest -c config/default.json</code></li> <li>Open a new terminal at the same location.</li> <li>Navigate to <code>engine</code> via    <code>shell    cd engine</code></li> <li>Install dependencies via    <code>shell    npm i</code></li> <li>Download the example DAHCC dataset via     <code>shell    curl -L https://cloud.ilabt.imec.be/index.php/s/8BatNcg2iEyJktR/download -o data/dataset_participant1_100obs</code></li> <li>Set the value of <code>datasetFolders</code> to the full path of the folder <code>engine/data</code> in the file <code>src/config/replay_properties.json</code>.</li> <li>Start the engine via    <code>shell    npm start</code></li> </ol> <p>If you get an error, see the README of the repository.</p>"},{"location":"challenge-reports/storing-large-real-time-data-streams-in-pod-using-LDES/#steps","title":"Steps","text":"<ol> <li>Get all loadable datasets using a GET request via    <code>shell    curl http://localhost:3001/datasets</code>    You get something like    <code>shell    [\"dataset_participant1_100obs\",\"dataset_participant2_100obs\"]</code></li> <li>Load a particular dataset using a GET request via    <code>shell    curl http://localhost:3001/loadDataset?dataset=dataset_participant1_100obs</code>    You get an empty result.</li> <li>Check the loading progress (in quad count) using a GET request via    <code>shell    curl http://localhost:3001/checkLoadingSize</code>    You get something like    <code>shell    [500]</code></li> <li>Get the actual observation count (quads / observation) using a GET request via    <code>shell    curl http://localhost:3001/checkObservationCount</code>    You get something like    <code>shell    [100]</code></li> <li>Sort the loaded observations (as according to the configured TreePath) using a GET request via    <code>shell    curl http://localhost:3001/sortObservations</code>    You get something like    <code>shell    [[\"https://dahcc.idlab.ugent.be/Protego/_participant1/obs0\",\"https://dahcc.idlab.ugent.be/Protego/_participant1/obs1\",\"https://dahcc.idlab.ugent.be/Protego/_participant1/obs2\" ... ]]</code></li> <li>Get a sample (as in the configured chunk) set of observations using a GET request via    <code>shell    curl http://localhost:3001/getObservations</code>    You get something like    <code>shell    [{\"termType\":\"NamedNode\",\"value\":\"https://dahcc.idlab.ugent.be/Protego/_participant1/obs0\"},{\"termType\":\"NamedNode\",\"value\":\"https://dahcc.idlab.ugent.be/Protego/_participant1/obs1\"} ...}]</code></li> <li> <p>Replay one next observation using a GET request via    <code>shell    curl http://localhost:3001/advanceAndPushObservationPointer</code>    You get something like    <code>shell    [1]</code>    This represents the pointer to the next replayable observation.    Checking the LDES in the Solid pod (default: http://localhost:3000/test/),    you should see at least two containers (the inbox and the LDES buckets),    where the LDES buckets should now contain the replayed observation,    for example http://localhost:3000/test/1641197095000/aa28a2fa-010f-4b81-8f3c-a57f45e13758.</p> </li> <li> <p>Replay all remaining observations using a GET request via    <code>shell    curl http://localhost:3001/advanceAndPushObservationPointerToTheEnd</code></p> </li> </ol>"},{"location":"challenge-reports/storing-large-real-time-data-streams-in-pod-using-LDES/#postconditions","title":"Postconditions","text":"<p>All observations are in the pod.</p>"},{"location":"challenge-reports/storing-large-real-time-data-streams-in-pod-using-LDES/#follow-up-actions","title":"Follow-up actions","text":"<p>None.</p>"},{"location":"challenge-reports/storing-large-real-time-data-streams-in-pod-using-LDES/#future-work","title":"Future work","text":"<ul> <li>Real-time replay including throttling.  Challenge #83 is relevant, together with the roadmap in the solution's repository.</li> <li>Elaborate filtering on the datasets used, such as selecting specific metrics that need to be replayed rather than the entire dataset.</li> <li>Improve the LDES in LDP approach, if possible.</li> </ul>"},{"location":"challenge-reports/storing-large-real-time-data-streams-in-pod-using-LDES/#contributors","title":"Contributors","text":"<ul> <li>Challenge: Pieter Bonte</li> <li>Solution: Stijn Verstichel</li> <li>Report: Pieter Heyvaert</li> </ul>"},{"location":"challenge-reports/temporal-usage-control-policy-execution-for-solid-resources/","title":"Temporal usage control policy execution for solid resources","text":""},{"location":"challenge-reports/temporal-usage-control-policy-execution-for-solid-resources/#temporal-usage-control-policy-execution-for-solid-resources-permalink","title":"Temporal Usage Control Policy execution for Solid Resources (permalink)","text":"<p>The corresponding challenge is #111.</p>"},{"location":"challenge-reports/temporal-usage-control-policy-execution-for-solid-resources/#problem","title":"Problem","text":"<p>Sharing data with other people, apps, and other agents is common in the Solid ecosystem. But you might not always want to share the data forever. You might want to share specific data for a limited amount of time. Therefore, we want a proof-of-concept that shows how we can give temporary access to a resource.</p> <p>The International Data Space Association (IDSA) has already defined some  Usage Control Policies (UCPs)  such as the Duration-restricted Data Usage Policy. It would be preferred if the implementation uses such a policy as a basis.</p>"},{"location":"challenge-reports/temporal-usage-control-policy-execution-for-solid-resources/#approved-solution","title":"Approved solution","text":"<p>We developed two plugins for Koreografeye:  AclPlugin and  CronPlugin. The AclPlugin allows updating the ACL of a resource. The CronPlugin allows executing another plugin at a specific time. We also created  N3 rules to define how and when these plugins are executed. The Solid Agent brings all these components together: it reads the policies, uses Koreografeye to reason over the policies and the rules, and identifies what tasks need to be executed using the aforementioned plugins. You find more information about how it works  here.</p>"},{"location":"challenge-reports/temporal-usage-control-policy-execution-for-solid-resources/#screencast","title":"Screencast","text":"<p>You find a screencast of the plugin  here. Note that the screencast has no audio, but we explain what is presented next.</p> <p>In this screencast, you see three windows:</p> <ul> <li>On the left we have Penny where we've logged in    with WebID <code>https://woutslabbinck.solidcommunity.net/profile/card#me</code>.   In this window, we can now browse resources on Solid Pods while being authenticated.</li> <li>On the top right the Solid Agent in the <code>DemoUCPAgent.ts</code> configuration is running (see step 2).</li> <li> <p>On the bottom right, there is a blank terminal which we will use to send a policy to  a container that we call the Usage Control Policy Knowledge Graph (UCP KG).</p> </li> <li> <p>We are authenticated and  see the storage of the Solid pod of woutslabbinck.</p> </li> <li>woutslabbinck wants to access the resource at  URL <code>http://localhost:3000/ldes</code>, but does not have access.</li> <li>However, there is a policy from the owner of that resource that can be activated. This policy allows the assignee (woutslabbinck) to have  read access to the resource for a period of 30 seconds (<code>\"PT30S\"^^xsd:duration</code>).</li> <li>In the bottom right pane we send this policy to the UCP KG,     which the DemoUCPAgent then immediately enforces. </li> <li>Now, while authenticated as woutslabbinck,  we can see the resource in Penny.</li> <li>When 30 seconds have passed the DemoUCPAgent executes the final part of the policy.  It takes away read access control for woutslabbinck,  as defined in the Usage Control Policy.</li> </ul> <p>We made the following important technological decisions and assumptions:</p> <ul> <li>The UCP KG is modelled as a Solid container,    which furthermore requires that the Solid server supports    the Solid Notifications Protocol v0.2.0.</li> <li>This way, the agent can listen to any policy addition.</li> <li>Additionally, we can then assume that the UCP KG is valid.     The agent does not check whether the complete set of UCPs are valid or not.      It will only execute them.     Any conflicts in the UCP KG thus are the fault of the end-user, not of the agent.</li> <li>For each target resource (<code>ids:target</code>), the agent MUST have <code>acl:Control</code> permission.</li> <li>The Solid Protocol defines two options for Authorization (\u00a711):    Web Access Control (WAC) and Access Control Policy (ACP).   The agent assumes that the Solid server hosting the target resources support WAC (and therefore Access Control List (ACL) resources).</li> <li>The N3 rules contain built-ins that do work with the EYE reasoner,    though no guarantees can be made with other N3 reasoners.</li> <li>Only the Duration-restricted Data Usage from    IDS Usage Control Policies    has been implemented and tested as N3 Rule.</li> <li>Due to how Koreografeye extracts policies from the Reasoning Result,      the cardinality of target resources and assignees can only be 1.     We made a feature request to solve this problem at its root.</li> <li>We added the triple <code>&lt;permissionIdentifier&gt; &lt;odrl:assignee&gt; &lt;WebID&gt; .</code> to the UCP to make sure we have a WebID to      which we can give access (though this was not described in      the Pattern examples).</li> <li>Giving Permission equals to giving read access (<code>acl:Read</code>).</li> </ul> <p>They are originally described here.</p>"},{"location":"challenge-reports/temporal-usage-control-policy-execution-for-solid-resources/#user-flow","title":"User flow","text":""},{"location":"challenge-reports/temporal-usage-control-policy-execution-for-solid-resources/#actorsactresses","title":"Actors/actresses","text":"<ul> <li>User of the application.</li> </ul>"},{"location":"challenge-reports/temporal-usage-control-policy-execution-for-solid-resources/#preconditions","title":"Preconditions","text":"<ul> <li>The user has Node.js installed.</li> <li>The user has a WebID and pod.   You can create both for testing via the Pod Playground of SolidLab.</li> </ul>"},{"location":"challenge-reports/temporal-usage-control-policy-execution-for-solid-resources/#steps","title":"Steps","text":"<ol> <li>Clone the repository via    <code>shell    git clone https://github.com/SolidLabResearch/Solid-Agent.git</code></li> <li>Navigate to the folder <code>Solid-Agent</code> via    <code>shell    cd Solid-Agent</code></li> <li>Check out commit 6d7c236 via    <code>shell    git checkout 6d7c236</code></li> <li>Install dependencies via     <code>shell    npm i</code></li> <li>Start an instance of the Community Solid Server (CSS) via    <code>shell    npx community-solid-server -c memory-no-setup.json</code>    This instance (port 3000) will contain the policies and the resource to which we will grant access.</li> <li>Start the DemoUCPAgent via    <code>shell    npx ts-node indexUCP.ts</code>    This code also starts a CSS instance (port 3123) for the Solid Actor and     creates an account so the Solid Actor has a WebID (http://localhost:3123/solid/profile/card#me).    Furthermore, it creates a policy container (http://localhost:3000/policies/) and     creates a resource (http://localhost:3000/ldes) which is used as target resource.</li> <li>Open the Web app Penny.</li> <li>Log in with your WebOID.</li> <li>Try to read the resource http://localhost:3000/ldes.    You are not able to read the resource, because you don't have access yet.</li> <li>Add your WebID in the file <code>UcpSendPolicy.ts</code> on line 37.     We will grant this WebID access in the next step.</li> <li>Send a duration usage-restricted access UCP to the policy container via     <code>shell     npx ts-node UcpSendPolicy.ts</code></li> </ol>"},{"location":"challenge-reports/temporal-usage-control-policy-execution-for-solid-resources/#postconditions","title":"Postconditions","text":"<ul> <li>You are able  to read the resource with Penny.</li> </ul>"},{"location":"challenge-reports/temporal-usage-control-policy-execution-for-solid-resources/#follow-up-actions","title":"Follow-up actions","text":"<ul> <li>Due to how Koreografeye extracts policies from the Reasoning Result,   the cardinality of target resources and assignees can only be 1.   We made a feature request to solve this problem at its root.</li> <li>Investigate if the triple <code>&lt;permissionIdentifier&gt; &lt;odrl:assignee&gt; &lt;WebID&gt; .</code> is the best way to add the WebID to   which we give access.</li> </ul>"},{"location":"challenge-reports/temporal-usage-control-policy-execution-for-solid-resources/#future-work","title":"Future work","text":"<ul> <li>Combine temporary access with the location app  of challenge #10. We described this in challenge #116</li> </ul>"},{"location":"challenge-reports/temporal-usage-control-policy-execution-for-solid-resources/#lessons-learned-about-developer-experience","title":"Lessons learned about developer experience","text":"<ul> <li>When manually editing WebIDs and ACL files, and introducing errors,  it is hard to find these errors.  It would be useful to have a dedicated library to edit these types of files. Another option would be to let the server return a 400 status code when writing invalid RDF to resources.</li> </ul>"},{"location":"challenge-reports/temporal-usage-control-policy-execution-for-solid-resources/#contributors","title":"Contributors","text":"<ul> <li>Challenge: Wout Slabbinck</li> <li>Solution: Wout Slabbinck</li> <li>Report: Pieter Heyvaert</li> </ul>"}]}